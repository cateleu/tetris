class Tetromino {
    field TetrominoFactory factory;
    field int screenOffset; // offset to screen playground.
    field int maxSize; // 4 by 4 square.
    field int row, col;
    field int debugFlag;

    field Array piece;

    //zzzz debug
    field int randomIndex;

    constructor Tetromino new(TetrominoFactory tetrominoFactory) {
        let factory = tetrominoFactory;

        let screenOffset = 10;
        let row = 0;        // row: [0-15]
        let col = 0;        // col: [0-9]
        let maxSize = 4;    // 4 by 4: [0-3] 

        do generate();
        //do factory.debugDumpAllPieces();
        return this;
    }

    method void setDebugFlag(int flag) {
        let debugFlag = flag;
        return;
    }

    // must run generate first!
    method void debugDumpPiece() {
        var int i, j, column, value;
        
        let column = 10;
        let i = 0;
        let j = 0;
        do Output.moveCursor(6, column);
        do Output.printString("Current:");
        do Output.println();
        do Output.moveCursor(7, column);
        do factory.debugDumpPiece(piece);
        return;
    }

    method Array getCurrentPiece() {
        return piece;
    }

    method int getRow() {
        return row;
    }

    method int getCol() {
        return col;
    }

    method int getPieceValue(int pieceRow, int pieceCol) {
        var Array value;

        let value = piece[pieceRow];
        return value[pieceCol];
    }

    method int getPieceRightEdgeColIndex() {
        var int pieceColIndex,
                pieceRowIndex;
        var Array rowValue;

        let pieceColIndex = maxSize - 1;
        while (pieceColIndex > -1) {
            let pieceRowIndex = 0;
            //let rowValue = piece[pieceRowIndex];
            //if (debugFlag = 7) {
                
            //}
            while (pieceRowIndex < maxSize) {
                let rowValue = piece[pieceRowIndex];
                //do Utilities.displayArrayValues(rowValue, maxSize);
                if (rowValue[pieceColIndex] = 1) {
                    return pieceColIndex;
                }
                let pieceRowIndex = pieceRowIndex + 1;
            }
            let pieceColIndex = pieceColIndex - 1;
        }
        return pieceColIndex;
    }

    method int getPieceRightEdgeIndex() {
        var int pieceRightEdgeIndex,
                val1, val2, val3, val4;
        var Array rowValue;

        // search from far right index.
        let pieceRightEdgeIndex = maxSize - 1;
        while (pieceRightEdgeIndex > -1) {
            let rowValue = piece[pieceRightEdgeIndex];
            let val1 = rowValue[0];
            let val2 = rowValue[1];
            let val3 = rowValue[2];
            let val4 = rowValue[3];

            if (((val1 = 1) | (val2 = 1)) | 
                ((val3 = 1) | (val4 = 1))) {
                    return pieceRightEdgeIndex;
            }
            let pieceRightEdgeIndex = pieceRightEdgeIndex - 1;
        } // while
        return -1; // error the piece has no block!
    }

    method int getPieceTopRowIndex() {
        var int pieceTopIndex,
                val1, val2, val3, val4;
        var Array rowValue;

        let pieceTopIndex = 0;
        while (pieceTopIndex < maxSize) {
            let rowValue = piece[pieceTopIndex];
            let val1 = rowValue[0];
            let val2 = rowValue[1];
            let val3 = rowValue[2];
            let val4 = rowValue[3];

            if (((val1 = 1) | (val2 = 1)) | 
                ((val3 = 1) | (val4 = 1))) {
                    return pieceTopIndex;
            }
            let pieceTopIndex = pieceTopIndex + 1;
        }
        return -1; //error - the piece has no block!
    }

    method int getPieceBottomRowIndex() {
        var int pieceBottom,
            val1, val2, val3, val4;
        var Array rowValue;

        let pieceBottom = maxSize - 1; 
        while (pieceBottom > -1) {
            let rowValue = piece[pieceBottom];
            let val1 = rowValue[0];
            let val2 = rowValue[1];
            let val3 = rowValue[2];
            let val4 = rowValue[3];
            
            if (((val1 = 1) | (val2 = 1)) | 
                ((val3 = 1) | (val4 = 1))) {
                    return pieceBottom;
                }
            let pieceBottom = pieceBottom - 1;
        } // while
        return -1;
    }

    // return the piece configation.
    method int getPieceConfig(int rowIndex, int colIndex) {
        var Array rowValue;
        let rowValue = Array.new(4);
        let rowValue = piece[rowIndex];
        return rowValue[colIndex];
    }

    method void setPiece(int pieceNo) {
        let piece = factory.getTetromino(pieceNo);
        return;
    }

    method void generate() {
        //TODO: randomize 
        if (randomIndex = 0) {
            let randomIndex = 1;
        } else {
            if (randomIndex = 1) {
                let randomIndex = 2;
            } else {
                let randomIndex = 0;
            }
        }
        let piece = factory.getTetromino(randomIndex);
        let row = 0;
        let col = 0;
        do draw(row, col);

        return;
    }

    method boolean isCollide() {
        return false;
    }

    method void moveLeft() {
        do erase (row, col);
        let col = col - 1;
        do draw(row, col);
        
        return;
    }

    method void moveRight() {
        do erase (row, col);
        let col = col + 1;
        do draw(row, col);

        return;
    }

    method void drop() {
        do erase(row, col);
        let row = row + 1;
        do draw(row, col);
        return;
    }

    method void dropTo(int rowIndex) {
        do erase(row, col);
        let row = rowIndex;
        do draw(row, col);
        return;
    }

    method void erase(int row, int col) {
        var int i, j, x, y, pos;
        var Array value;

        let i = 0;
        let y = (row * 512);
        let x = col + screenOffset;
        
        while (i < 4) {
            let j = 0;
            let pos = 12;
            let value = piece[i];
            while (j < 4) {
                if (value[j] = 1) {
                    do Graphics.eraseBlock(y + (i * 512) + x + j);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method void draw(int row, int col) {
        var int i, j, x, y, pos;
        var Array value;

        let i = 0;
        let y = (row * 512);
        let x = col + screenOffset;
        
        while (i < 4) {
            let j = 0;
            let pos = 12;
            let value = piece[i];
            while (j < 4) {
                if (value[j] = 1) {
                    do Graphics.drawBlock(y + (i * 512) + x + j);
                }
                let j = j + 1;
            }
            let i = i + 1;
            
        }
        return;
    }

    method void dispose() {
        do object.dispose();
        do Memory.deAlloc(this);
        return;
    }
}