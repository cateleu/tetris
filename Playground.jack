class Playground {
    field int screenOffset;
    field Array row;
    field Array col;
    field int MAXROW;
    field int MAXCOL;
    field Tetromino tetromino;
    field int debugFlag;

    constructor Playground new() {
        var int i, j;
        
        let screenOffset = 10;
        let MAXROW = 16;
        let MAXCOL = 10;
        // MAXROW + 1 add all block for collide detection.
        let row = Array.new(MAXROW+1);
        let col = Array.new(MAXCOL);
        
        let i = 0;
        
        // Initialize the while playground value to be 0. (no block)
        while (i < MAXROW) {
            let j = 0;
            while (j < MAXCOL) {
                let col[j] = 0;
                let j = j + 1;
            }
            let row[i] = col;
            let col = Array.new(MAXCOL);
            let i = i + 1;
        }

        // add the bottom blocks
        let j = 0;
        while (j < MAXCOL) {
            let col[j] = 1;
            let j = j + 1;
        }
        let row[16] = col;

        return this;
    }

    method void drawSideEdges() {
        do Graphics.drawBackgroundEdges();
        return;
    }

    method void setDebugFlag(int flag) {
        let debugFlag = flag;
        return;
    }

    method void usePiece(Tetromino piece) {
        let tetromino = piece;
        return;
    }

    method void dumpPlaygroundData() {
        var int i, j;
        var Array rowValue;

        do Output.moveCursor(6, 0);
        do Output.printString("pg:");
        do Output.println();
        while (i < MAXROW) {
            let rowValue = row[i];
            if (rowValue = 0) {
                do Output.printInt(i);
                do Output.printString(":[");
                do Output.printString("0--------0");
                do Output.printString("]");
                do Output.println();
            } else {
                if (rowValue = -1) {
                do Output.printInt(i);
                do Output.printString(":[");
                do Output.printString("----------");
                do Output.printString("]");
                do Output.println();
                } else {
                    let j = 0;
                    do Output.printInt(i);
                    do Output.printString(":[");
                    while (j < MAXCOL) {
                        do Output.printInt(rowValue[j]);
                        let j = j + 1;
                    }
                    do Output.printString("]");
                    do Output.println();
                }
            } 
            
            let i = i + 1;
        }
        return;
    }

    method void setBlankLineData(int rowIndex) {
        var int i;
        var Array col;

        let i = 0;
        let col = Array.new(MAXCOL);

        while (i < MAXCOL) {
            let col[i] = 0;
            let i = i + 1;
        }
        let row[rowIndex] = col;
        return;
    }

    method void setLineErased(int rowIndex) {
        //zzzz
        do fillPlayground(rowIndex, 0, 2, 10);
        //let row[rowIndex] = -1;
        /*
        var Array rowArray;
        var int i;
        var Array col;
       
        let rowArray = row[rowIndex];
        do rowArray.dispose();
        //let row[rowIndex] = -1;
        let i = 0;
        let col = Array.new(MAXCOL);

        while (i < MAXCOL) {
            let col[i] = 2;
            let i = i + 1;
        }
        let row[rowIndex] = col;
        */
        return;
    }

    method boolean isLineErased(int rowIndex) {
        //return row[rowIndex] = -1;
        var Array rowArray;
        let rowArray = row[rowIndex];
        return rowArray[0] = 2;
    }

    // Set row y, col x the value 1.
    method void set(int y, int x) {
        var Array col;
        let col = Array.new(MAXCOL);
        let col = row[y];
        let col[x] = 1;
        return;
    }

    // Set row y, col x with value.
    method void setValue(int y, int x, int value) {
        var Array col;
        let col = Array.new(MAXCOL);
        let col = row[y];
        let col[x] = value;
        return;
    }

    // some problem with isSet!
    method boolean isSet(int y, int x) {
        var Array rowArray;
        var boolean flag;

        let rowArray = row[y];
        if (rowArray[x] = 1) {
            return true;
        }
        return false;
    }

    method int getValue(int y, int x) {
        var Array col;
        let col = row[y];
        return col[x];
    }

    method int findTopFilledIndex() {
        var int pieceColIndex,
                pieceBottomRowIndex,
                pgStartRowIndex, maxPlaygroundRow,
                pgVal1, pgVal2, pgVal3, pgVal4,
                pVal1, pVal2, pVal3, pVal4,
                topFilledIndex,
                iterateIndex;
        var Array pieceArray, 
                  pieceRowArray;

        let pieceArray = tetromino.getCurrentPiece();
        let pieceBottomRowIndex = tetromino.getPieceBottomRowIndex();
        let pieceColIndex = tetromino.getCol();
        
        // compare the playground block starting from top of the piece.
        let pgStartRowIndex = tetromino.getRow();
        let maxPlaygroundRow = 16;

        if (debugFlag = 3) {
            do Output.moveCursor(1, 0);
            do Output.printString("findTopFilledIndex:");
            do Output.println();
            do Output.printString("pieceCol:");
            do Output.printInt(pieceColIndex);
            do Output.println();
            do Output.printString("pgStartRowIndex:");
            do Output.printInt(pgStartRowIndex);
            do Output.println();
        }
        while (pgStartRowIndex < maxPlaygroundRow) {
            
            let pgVal1 = getValue(pgStartRowIndex, pieceColIndex);
            let pgVal2 = getValue(pgStartRowIndex, pieceColIndex + 1);
            let pgVal3 = getValue(pgStartRowIndex, pieceColIndex + 2);
            let pgVal4 = getValue(pgStartRowIndex, pieceColIndex + 3);
            
            if (debugFlag > 0) {
                do Output.printInt(pgStartRowIndex);
                do Output.printString(":[");
                do Output.printInt(pgVal1);
                do Output.printInt(pgVal2);
                do Output.printInt(pgVal3);
                do Output.printInt(pgVal4);
                do Output.printString("]");
                do Output.println();
            }
            // if playground has any block
            if (((pgVal1 = 1) | (pgVal2 = 1)) |
                ((pgVal3 = 1) | (pgVal4 = 1))) {
                // iterate from pieceBottomRowIndex to top to compare.
                let iterateIndex = pieceBottomRowIndex;
                while (iterateIndex > -1) {
                    let pieceRowArray = pieceArray[iterateIndex];
                    let pVal1 = pieceRowArray[0];
                    let pVal2 = pieceRowArray[1];
                    let pVal3 = pieceRowArray[2];
                    let pVal4 = pieceRowArray[3];

                    if (debugFlag > 0) {
                        do Output.printString("piece iterate:");
                        do Output.println();
                        do Output.printInt(iterateIndex);
                        do Output.printString(":[");
                        do Output.printInt(pVal1);
                        do Output.printInt(pVal2);
                        do Output.printInt(pVal3);
                        do Output.printInt(pVal4);
                        do Output.printString("]");
                        do Output.println();
                    }

                    if (((pgVal1 = 1 & pVal1 = 1) | 
                        (pgVal2 = 1 & pVal2 = 1)) | 
                        ((pgVal3 = 1 & pVal3 = 1) |
                        (pgVal4 = 1 & pVal4 = 1))) {

                        let topFilledIndex = pgStartRowIndex + (pieceBottomRowIndex - iterateIndex);
                        if (debugFlag > 0) {
                            do Output.printString("TopFilledIndex:");
                            do Output.printInt(topFilledIndex);
                            do Output.println();
                        }
                        return (topFilledIndex);

                    }
                    let iterateIndex = iterateIndex - 1;
                } // while
            }
            let pgStartRowIndex = pgStartRowIndex + 1;
        }
        if (debugFlag > 0) {
            do Output.printString("TopFilledIndex:");
            do Output.printInt(pgStartRowIndex);
            do Output.println();
        }
        return (pgStartRowIndex);
    }

    method void dropFastRevised() {
        var int currentRowIndex,
                diff;

        let currentRowIndex = 1;
        let diff = MAXROW - 1 - tetromino.getPieceBottomRowIndex();

        while (currentRowIndex < diff) {
            // Check from tetromino's position + currentRowIndex to see if it is hit.
            //if (~isHit(currentRowIndex, 0)) {
            if (~isHitRevised(currentRowIndex, 0)) {
                let currentRowIndex = currentRowIndex + 1;
            } else {
                // it was checked currentRowIndex is hit, so drop to currentRowIndex - 1
                // from the tetromino position.
                do tetromino.dropTo(tetromino.getRow() + currentRowIndex - 1);
                do embedPiece();
                do tetromino.generate();
                return;
            }
        }
        return;
    }

    method boolean isEmptyLine(int rowIndex) {
        var Array rowValueArray;
        var int colIndex,
                checkFlag;

        if (row[rowIndex] = -1) {
            return false;
        }
        let rowValueArray = row[rowIndex];
        let colIndex = 0;
        let checkFlag = 0;
        while (colIndex < MAXCOL) {
            let checkFlag = (checkFlag * rowValueArray[colIndex]);
            let colIndex = colIndex + 1;
        }
        return (checkFlag = 0);
    }

    // fill at rowIndex, col at startCol with fillLength long.
    method void fillPlayground(int rowIndex, int startCol, int value, int fillLength) {
        var int maxFill, i;
        
        let maxFill = startCol + fillLength;
        let i = startCol;
        while (i < maxFill) {
            do setValue(rowIndex, i, value);
            let i = i + 1;
        }
        return;
    }

    // if rowIndex is blank, drop the above line to rowIndex.
    // Iterate this process until the top is dropped.
    method void collapseAt(int rowIndex) {
        var int processRowIndex,
                aboveRowIndex,
                moveToRowIndex;
        var Array rowArray,
                  rowAboveArray;

        do Utilities.debugDisplayIntValue("collapseAt",rowIndex);

        let processRowIndex = rowIndex;
        while (processRowIndex > 0) {
            if (isLineErased(processRowIndex)) {
                //do Utilities.debugDisplayIntValue("empty at:",processRowIndex);
                // move above row to this row.
                let aboveRowIndex = processRowIndex - 1;
                let moveToRowIndex = processRowIndex;
                do Utilities.debugDisplayIntValue("above",aboveRowIndex);
                do Utilities.debugDisplayIntValue("moveTo",moveToRowIndex);
                while (aboveRowIndex > 0) {
                    //zzzz
                    /*
                    if (isEmptyLine(aboveRowIndex)) {
                        do fillPlayground(moveToRowIndex, 0, 0, 10);
                    } else {
                        if (~isEmptyLine(aboveRowIndex)) {
                        let rowAboveArray = row[aboveRowIndex];
                        let rowArray = row[moveToRowIndex];
                        let row[moveToRowIndex] = rowAboveArray;
                        let aboveRowIndex = aboveRowIndex - 1;
                        let moveToRowIndex = moveToRowIndex - 1;
                        }
                    } */
                    let rowAboveArray = row[aboveRowIndex];
                        let rowArray = row[moveToRowIndex];
                        let row[moveToRowIndex] = rowAboveArray;
                        let aboveRowIndex = aboveRowIndex - 1;
                        let moveToRowIndex = moveToRowIndex - 1;
                } 
            }
            let processRowIndex = processRowIndex - 1;
            
        }
        return;
    }

    // collapse all blocks above fillLineIndex.
    //
    method void collapse(int fillLineIndex) {
        var int pieceRow, rowIndex, rowAboveIndex, colIndex;
        var Array rowArray, rowAboveArray;

        let rowIndex = fillLineIndex;
        do Output.printString("** rowIndex:");
        do Output.printInt(rowIndex);
        do Output.println();
        
        while (rowIndex > 0) {
            let rowAboveIndex = rowIndex - 1;
            let rowAboveArray = row[rowAboveIndex];
            let rowArray = Array.new(MAXCOL);
            if (debugFlag > 4) {
                do Output.printString("row:[");
                do Output.printInt(rowAboveIndex);
                do Output.printString("]");
                do Output.println();
                do Utilities.displayArray10Values(rowAboveArray);
            }
            
            let rowArray = rowAboveArray;
            let row[rowIndex] = rowArray;

            do Output.printString("row droppedTo:[");
            do Output.printInt(rowIndex);
            do Output.printString("]");
            do Output.println();
            do Utilities.displayArray10Values(row[rowIndex]);

            //do updateLine(rowIndex);
            let rowIndex = rowIndex - 1;
        }
        return;
    }

    method void doFillLineRevised() {
        var int pieceBottomRowIndex,
                pieceRow, rowIndex, colIndex,
                checkFlag,
                collapseAtIndex,
                eraseLine;
        
        var Array rowValue;

        var int needCollapse;
        
        let eraseLine = 0;
        let needCollapse = 0;
        let pieceBottomRowIndex = tetromino.getPieceBottomRowIndex();
        let colIndex = 0;
        let pieceRow = tetromino.getRow();
        
        // from the bottom of the piece index.
        let rowIndex = pieceRow + 3; // MAX - 1 = 3
        let collapseAtIndex = rowIndex;
        if (rowIndex > (MAXROW - 1)) {
            let rowIndex = 15;
        }

        // Check playground block if there is filled line to erase.
        while (rowIndex > (pieceRow - 1)) {
            let checkFlag = 1;
            let rowValue = row[rowIndex];
            let colIndex = 0;
 
            while (colIndex < MAXCOL) {
                let checkFlag = (checkFlag * rowValue[colIndex]);
                let colIndex = colIndex + 1;
            }
            if (checkFlag > 0) {
                do eraseLine(rowIndex);
                do setLineErased(rowIndex);
                let eraseLine = eraseLine + 1;
            }     
            let rowIndex = rowIndex - 1;
        }

        //do Utilities.debugDisplayIntValue("collapseAtIndex", collapseAtIndex);
        while (collapseAtIndex > 0) {
            do collapseAt(collapseAtIndex);
            if (~isLineErased(collapseAtIndex)) {
                let collapseAtIndex = -1;
            }
        }
        return;
    }

    method void updateLine(int rowIndex) {
        var int i, y;
        var Array rowValue;

        do eraseLine(rowIndex);
        let rowValue = row[rowIndex];
        //zzzz
        //do Utilities.displayArray10Values(rowValue);
        let y = (rowIndex * 512);
        let i = 0;
        while (i < 10) {
            if (rowValue[i] = 1) {
                do Graphics.drawBlock(y + screenOffset + i);
            } else {
                do Graphics.eraseBlock(y + screenOffset + i);
            }
            let i = i + 1;
        }
        return;
    }

    method void refresh() {
        var int rowIndex, i, y;
        var Array rowValue;

        let rowIndex = 15;
        while (rowIndex > 0) {
            let rowValue = row[rowIndex];
            let y = (rowIndex * 512);
            let i = 0;
            while (i < 10) {
                if (rowValue[i] = 1) {
                    do Graphics.drawBlock(y + screenOffset + i);
                } else {
                    do Graphics.eraseBlock(y + screenOffset + i);
                }
                let i = i + 1;
            }
            let rowIndex = rowIndex - 1;
        }
        return;
    }

    //
    // Draw a line at row specified.
    //
    method void drawLine(int row) {
        var int i, y;

        let y = (row * 512);
        
        let i = 0;
        while (i < 10) {
            do Graphics.drawBlock(y + screenOffset + i);
            let i = i + 1;
        }
        return;
    }

    method void eraseLine(int row) {
        var int i, y;

        let y = (row * 512);
        
        let i = 0;
        while (i < 10) {
            do Graphics.eraseBlock(y + screenOffset + i);
            let i = i + 1;
        }
        return;
    }

    method void embedPiece() {
        var Array piece, rowValue, 
                  pieceIndex, colIndex, pieceRow, pieceCol;
        var int checkRowIndex;

        let piece = tetromino.getCurrentPiece();
        let pieceRow = tetromino.getRow();
        let pieceCol = tetromino.getCol();
        let pieceIndex = 0;
        // Copy piece value onto playground.
        while (pieceIndex < 4) {
            let rowValue = piece[pieceIndex];
            let colIndex = 0;
            while (colIndex < 4) {
                if (rowValue[colIndex] > 0) {
                    do set((pieceRow + pieceIndex), (pieceCol + colIndex));
                }
                let colIndex = colIndex + 1;
            }
            let pieceIndex = pieceIndex + 1;
        }

        let checkRowIndex = pieceRow + 3;
        if (checkRowIndex > 15) {
            let checkRowIndex = 15;
        }

        do doFillLineRevised();
        return;
    }

    /*
     * find the top index of playground that has block.
     */
    method int findTopPlaygroundIndex() {
        var Array rowValue,
                  piece;
        var int rowIndex, colIndex,
                pieceCol, pieceRightEdgeCol;

        let piece = tetromino.getCurrentPiece();
        let pieceCol = tetromino.getCol();
        let pieceRightEdgeCol = pieceCol + 4;

        let rowIndex = 0;
        while (rowIndex < MAXROW) {
            let colIndex = pieceCol;
            let rowValue = row[rowIndex];
            while (colIndex < pieceRightEdgeCol) {
                if (rowValue[colIndex] = 1) {
                    return rowIndex;
                }
                let colIndex = colIndex + 1;
            }
            let rowIndex = rowIndex + 1;
        }
        return rowIndex;
    }

    method boolean isGameOver() {
        var int pieceBottomRowIndex, pieceRowPos,
                pieceActualBottomPos,
                playgroundTopIndex;

        let pieceBottomRowIndex = tetromino.getPieceBottomRowIndex();
        let pieceRowPos = tetromino.getRow();
        let playgroundTopIndex = findTopPlaygroundIndex();
        let pieceActualBottomPos = pieceRowPos + pieceBottomRowIndex;
        if (debugFlag = 6) {
            do Graphics.clearDebugScreen();
            do Output.printString("isGameOver");
            do Output.println();
            do Utilities.debugDisplayIntValue("piece bottom", pieceActualBottomPos);
            do Utilities.debugDisplayIntValue("playground top", playgroundTopIndex);
        }
        if ((pieceActualBottomPos > playgroundTopIndex) & (playgroundTopIndex < 2)){
            do Graphics.clearDebugScreen();
            do Output.printString("isGameOver");
            do Output.println();
            do Utilities.debugDisplayIntValue("piece bottom", pieceActualBottomPos);
            do Utilities.debugDisplayIntValue("playground top", playgroundTopIndex);
           return true;
        }
        return false;
    }

    // dRow - delta.
    // e.g. dRow = 1 what if the current tetromino is at row + 1?
    method boolean isHitRevised(int dRow, int dCol) {
        var int currentPieceRowPos,
                currentPieceColPos,
                pieceValue,
                playgroundValue,
                pgRow,
                pgCol,
                i,j;

        let currentPieceRowPos = tetromino.getRow();
        let currentPieceColPos = tetromino.getCol();
        let i = 3;

        while (i > 0) {
            let j = 3;
            while (j > 0) {
                let pieceValue = tetromino.getPieceValue(i, j);
                if (pieceValue > 0) {
                    let pgRow = currentPieceRowPos + dRow + i;
                    let pgCol = currentPieceColPos + dCol + j;

                    if (pgRow > MAXROW - 1 | pgRow = MAXROW) {
                        return true;
                    } 
                    let playgroundValue = getValue(pgRow, pgCol);
                    if (playgroundValue > 0) {
                        return true;
                    }
                }              
                let j = j - 1;
            }
            let i = i - 1;
        }
        return false;
    }
    
    method boolean isHit(int dRow, int dCol) {
        var Array piece, pieceRowArray;
        var int pieceRowIndex, pieceColIndex,
                pieceTopRowIndex, pieceBottomRowIndex,
                pieceRowPos, pieceColPos,
                pgValue;

        let piece = tetromino.getCurrentPiece();
        // I just tried to save iteration by find the row/col index
        // that has block so it won't go through blank space
        // which may not be necessary.
        let pieceBottomRowIndex = tetromino.getPieceBottomRowIndex();
        let pieceTopRowIndex = tetromino.getPieceTopRowIndex();

        let pieceRowIndex = pieceTopRowIndex;
        while (pieceRowIndex < (pieceBottomRowIndex+1)) {
            let pieceColIndex = 0;
            let pieceRowArray = piece[pieceRowIndex];
            while (pieceColIndex < tetromino.getMaxSize()) {
                // if the piece block is not empty
                if (pieceRowArray[pieceColIndex] > 0) {
                    // get the playground row/col position with respect to
                    // the piece position.
                    let pieceRowPos = tetromino.getRow() + pieceRowIndex + dRow;
                    let pieceColPos = tetromino.getCol() + pieceColIndex + dCol;

                    if ((pieceColPos > (MAXCOL-1) ) | (pieceColPos < 0)) {
                        return true;
                    }

                    let pgValue = getValue(pieceRowPos, pieceColPos);
                    if (pgValue > 0) {
                        return true;
                    }
                }
                let pieceColIndex = pieceColIndex + 1;
            }
            let pieceRowIndex = pieceRowIndex + 1;
        }

        return false;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}