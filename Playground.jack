class Playground {
    field int screenOffset;
    field Array row;
    field Array col;
    field int MAXROW;
    field int MAXCOL;
    field Tetromino tetromino;
    field int debugFlag;

    constructor Playground new() {
        var int i, j;
        
        let screenOffset = 10;
        let MAXROW = 16;
        let MAXCOL = 10;
        // MAXROW + 1 add all block for collide detection.
        let row = Array.new(MAXROW+1);
        let col = Array.new(MAXCOL);
        
        let i = 0;
        
        // Initialize the while playground value to be 0. (no block)
        while (i < MAXROW) {
            let j = 0;
            while (j < MAXCOL) {
                let col[j] = 0;
                let j = j + 1;
            }
            let row[i] = col;
            let col = Array.new(MAXCOL);
            let i = i + 1;
        }

        // add the bottom blocks
        let j = 0;
        while (j < MAXCOL) {
            let col[j] = 1;
            let j = j + 1;
        }
        let row[16] = col;

        return this;
    }

    method void drawSideEdges() {
        do Graphics.drawBackgroundEdges();
        return;
    }

    method void setDebugFlag(int flag) {
        let debugFlag = flag;
        return;
    }

    method void usePiece(Tetromino piece) {
        let tetromino = piece;
        return;
    }

    method void dumpPlaygroundData() {
        var int i, j;
        var Array rowValue;

        do Output.moveCursor(6, 0);
        do Output.printString("pg:");
        do Output.println();
        while (i < MAXROW) {
            let rowValue = row[i];
            if (rowValue = 0) {
                if (i < 10) {
                    do Output.printInt(0);
                }
                do Output.printInt(i);
                do Output.printString(":[");
                do Output.printString("0--------0");
                do Output.printString("]");
                do Output.println();
            } else {
                if (rowValue = -1) {
                do Output.printInt(i);
                do Output.printString(":[");
                do Output.printString("----------");
                do Output.printString("]");
                do Output.println();
                } else {
                    let j = 0;
                    if (i < 10) {
                        do Output.printInt(0);
                    }
                    do Output.printInt(i);
                    do Output.printString(":[");
                    while (j < MAXCOL) {
                        do Output.printInt(rowValue[j]);
                        let j = j + 1;
                    }
                    do Output.printString("]");
                    do Output.println();
                }
            } 
            
            let i = i + 1;
        }
        return;
    }

    // TODO: bug! dont use.
    // method void setBlankLineData(int rowIndex) {
    //     var int i;
    //     var Array col;

    //     let i = 0;
    //     let col = Array.new(MAXCOL);

    //     while (i < MAXCOL) {
    //         let col[i] = 0;
    //         let i = i + 1;
    //     }
    //     let row[rowIndex] = col;
    //     return;
    // }

    method void setLineErased(int rowIndex) {
        do fillPlayground(rowIndex, 0, 2, 10);
        return;
    }

    method boolean isLineErased(int rowIndex) {
        var Array rowArray;
        let rowArray = row[rowIndex];
        return rowArray[0] = 2;
    }

    // Set row y, col x the value 1.
    method void set(int y, int x) {
        var Array col;
        let col = Array.new(MAXCOL);
        let col = row[y];
        let col[x] = 1;
        return;
    }

    //TODO: memory leak dont use
    // Set row y, col x with value.
    method void setValue(int y, int x, int value) {
        var Array col;
        let col = Array.new(MAXCOL);
        let col = row[y];
        let col[x] = value;
        return;
    }

    // some problem with isSet!
    method boolean isSet(int y, int x) {
        var Array rowArray;
        var boolean flag;

        let rowArray = row[y];
        if (rowArray[x] = 1) {
            return true;
        }
        return false;
    }

    method int getValue(int y, int x) {
        var Array col;
        let col = row[y];
        return col[x];
    }

    method void dropFastRevised() {
        var int currentRowIndex,
                diff,
                dropToValue;

        let currentRowIndex = 1;
        let diff = MAXROW - tetromino.getHeight();

        //do Utilities.debugDisplayIntValue("diff", diff);
        while (currentRowIndex < diff) {
            //do Utilities.debugDisplayIntValue("currentRowIndex", currentRowIndex);
            // Check from tetromino's position + currentRowIndex to see if it is hit.
            if (~isHitRevised(currentRowIndex, 0)) {
                let currentRowIndex = currentRowIndex + 1;
            } else {
                // it was checked currentRowIndex is hit, so drop to currentRowIndex - 1
                // from the tetromino position.
                // let dropToValue = tetromino.getRow() + currentRowIndex;
                // do Utilities.debugDisplayIntValue("DropTo", dropToValue);
                // do tetromino.dropTo(tetromino.getRow() + currentRowIndex);
                let dropToValue = tetromino.getRow() + currentRowIndex - 1;
                //do Utilities.debugDisplayIntValue("DropTo", dropToValue);
                do tetromino.dropTo(dropToValue);
                return;
            }
        }
        return;
    }

    method boolean isEmptyLine(int rowIndex) {
        var Array rowValueArray;
        var int colIndex,
                checkFlag;

        if (row[rowIndex] = -1) {
            return false;
        }
        let rowValueArray = row[rowIndex];
        let colIndex = 0;
        let checkFlag = 0;
        while (colIndex < MAXCOL) {
            let checkFlag = (checkFlag * rowValueArray[colIndex]);
            let colIndex = colIndex + 1;
        }
        return (checkFlag = 0);
    }

    // fill at rowIndex, col at startCol with fillLength long.
    method void fillPlayground(int rowIndex, int startCol, int value, int fillLength) {
        var int maxFill, i;
        var Array rowArray;
        
        let maxFill = startCol + fillLength;
        let i = startCol;
        let rowArray = row[rowIndex];
        while (i < maxFill) {
            let rowArray[i] = value;
            let i = i + 1;
        }
        return;
    }

    //
    // set at rowIndex the row data (10 columns)
    method void setRowData(int rowIndex, 
                           int c0, int c1, int c2, int c3, int c4, 
                           int c5, int c6, int c7, int c8, int c9) {
        do setValue(rowIndex, 0, c0);
        do setValue(rowIndex, 1, c1);
        do setValue(rowIndex, 2, c2);
        do setValue(rowIndex, 3, c3);
        do setValue(rowIndex, 4, c4);
        do setValue(rowIndex, 5, c5);
        do setValue(rowIndex, 6, c6);
        do setValue(rowIndex, 7, c7);
        do setValue(rowIndex, 8, c8);
        do setValue(rowIndex, 9, c9);
        return;
    }    
    // if rowIndex is blank, drop the above line to rowIndex.
    // Iterate this process until the top is dropped.
    method void collapseAt(int rowIndex) {
        var int processRowIndex,
                aboveRowIndex,
                moveToRowIndex,
                moveCount,
                colIndex;
        var Array rowArray,
                  rowAboveArray;

        let moveCount = 0;
        let processRowIndex = rowIndex;
        while (processRowIndex > 0) {
            if (isLineErased(processRowIndex)) {
                // move above row to this row.
                let aboveRowIndex = processRowIndex - 1;
                let moveToRowIndex = processRowIndex;
                while (aboveRowIndex > 0) {
                    let moveCount = moveCount + 1;
                    let rowAboveArray = row[aboveRowIndex];
                    let rowArray = row[moveToRowIndex];
                    
                    do Utilities.copyArray(rowAboveArray, rowArray, MAXCOL);
                let aboveRowIndex = aboveRowIndex - 1;
                let moveToRowIndex = moveToRowIndex - 1;
                
                } 
            }
            let processRowIndex = processRowIndex - 1;         
        }
        return;
    }

    // collapse all blocks above fillLineIndex.
    //
    method void collapse(int fillLineIndex) {
        var int pieceRow, rowIndex, rowAboveIndex, colIndex;
        var Array rowArray, rowAboveArray;

        let rowIndex = fillLineIndex;
        do Output.printString("** rowIndex:");
        do Output.printInt(rowIndex);
        do Output.println();
        
        while (rowIndex > 0) {
            let rowAboveIndex = rowIndex - 1;
            let rowAboveArray = row[rowAboveIndex];
            let rowArray = Array.new(MAXCOL);
            if (debugFlag > 4) {
                do Output.printString("row:[");
                do Output.printInt(rowAboveIndex);
                do Output.printString("]");
                do Output.println();
                do Utilities.displayArray10Values(rowAboveArray);
            }
            
            let rowArray = rowAboveArray;
            let row[rowIndex] = rowArray;

            do Output.printString("row droppedTo:[");
            do Output.printInt(rowIndex);
            do Output.printString("]");
            do Output.println();
            do Utilities.displayArray10Values(row[rowIndex]);

            //do updateLine(rowIndex);
            let rowIndex = rowIndex - 1;
        }
        return;
    }

    method int doFillLineRevised() {
        var int pieceRow, rowIndex, colIndex,
                checkFlag,
                collapseAtIndex,
                eraseLine;
        
        var Array rowValue;

        var int needCollapse;
        
        let eraseLine = 0;
        let needCollapse = 0;
        let colIndex = 0;
        let pieceRow = tetromino.getRow();
        
        // from the bottom of the piece index.
        let rowIndex = pieceRow + 3; // MAX - 1 = 3
        if (rowIndex > (MAXROW - 1)) {
            let rowIndex = 15;
        }
        let collapseAtIndex = rowIndex;

        // Check playground block if there is filled line to erase.
        while (rowIndex > (pieceRow - 1)) {
            let checkFlag = 1;
            let rowValue = row[rowIndex];
            let colIndex = 0;
 
            while (colIndex < MAXCOL) {
                let checkFlag = (checkFlag * rowValue[colIndex]);
                let colIndex = colIndex + 1;
            }
            if (checkFlag > 0) {
                let needCollapse = 1;
                do eraseLine(rowIndex);
                do setLineErased(rowIndex);
                let eraseLine = eraseLine + 1;
            }     
            let rowIndex = rowIndex - 1;
        }

        //do Utilities.debugDisplayIntValue("collapseAtIndex", collapseAtIndex);
        // while (collapseAtIndex > 0) {
        //      do collapseAt(collapseAtIndex);
        //      if (~isLineErased(collapseAtIndex)) {
        //          let collapseAtIndex = -1;
        //      }
        //      // Note since collapse, the above dropped one level down.
        //      // collapseAtIndex remains     
        // }
        // Checkpt Fix
        
        if (needCollapse > 0) {
            return collapseAtIndex;
        }
        return -1;
        
    }

    method int doCollapse(int collapseAtIndex) {
        var int debugNeeded;

        let debugNeeded = 0;
        while (collapseAtIndex > 0) {
            while (isLineErased(collapseAtIndex)) {
                let debugNeeded = debugNeeded + collapseAt(collapseAtIndex);
            }
            let collapseAtIndex = collapseAtIndex - 1;
        }
        return debugNeeded;
    }

    method void updateLine(int rowIndex) {
        var int i, y;
        var Array rowValue;

        do eraseLine(rowIndex);
        let rowValue = row[rowIndex];
        let y = (rowIndex * 512);
        let i = 0;
        while (i < 10) {
            if (rowValue[i] = 1) {
                do Graphics.drawBlock(y + screenOffset + i);
            } else {
                do Graphics.eraseBlock(y + screenOffset + i);
            }
            let i = i + 1;
        }
        return;
    }

    // Refresh and draw playground data on screen.
    method void refresh() {
        var int rowIndex, i, y;
        var Array rowValue;

        let rowIndex = 15;
        while (rowIndex > 0) {
            let rowValue = row[rowIndex];
            let y = (rowIndex * 512);
            let i = 0;
            while (i < 10) {
                if (rowValue[i] = 1) {
                    do Graphics.drawBlock(y + screenOffset + i);
                } else {
                    do Graphics.eraseBlock(y + screenOffset + i);
                }
                let i = i + 1;
            }
            let rowIndex = rowIndex - 1;
        }
        do drawSideEdges();
        return;
    }

    //
    // Draw a line at row specified.
    //
    method void drawLine(int row) {
        var int i, y;

        let y = (row * 512);
        
        let i = 0;
        while (i < 10) {
            do Graphics.drawBlock(y + screenOffset + i);
            let i = i + 1;
        }
        return;
    }

    method void eraseLine(int row) {
        var int i, y;

        let y = (row * 512);
        
        let i = 0;
        while (i < 10) {
            do Graphics.eraseBlock(y + screenOffset + i);
            let i = i + 1;
        }
        return;
    }

    method void embedPiece() {
        var Array piece, rowValue,
                  pgRow;

        var int   pieceRow, pieceCol,
                  pieceIndex,
                  colIndex,
                  pgRowIndex,
                  mostLeftIndex;

        let piece = tetromino.getCurrentPiece();
        let pieceRow = tetromino.getRow();
        let pieceCol = tetromino.getCol();
        let pieceIndex = tetromino.getPieceTopRowIndex();
        let pgRowIndex = 0;
        let mostLeftIndex = tetromino.getPieceLeftEdgeIndex();
        // Copy piece value onto playground.
        while (pieceIndex < 4) {
            let rowValue = piece[pieceIndex];
            let colIndex = 0;
            while (colIndex < 4) {
                // if the piece's current col has a block
                if (rowValue[colIndex] > 0) {
                    // do Utilities.debugDisplayIntValue("pRow", pieceIndex);
                    // do Utilities.debugDisplayIntValue("pCol", colIndex);
                    // do Utilities.debugDisplayIntValue("pgRow", pieceRow + pgRowIndex);
                    // do Utilities.debugDisplayIntValue("pgCol", pieceCol + colIndex - mostLeftIndex);
                    // the piece could have blank, so start from pgRowIndex = 0
                    let pgRow = row[pieceRow + pgRowIndex];
                    let pgRow[pieceCol + colIndex - mostLeftIndex] = 1;
                }
                let colIndex = colIndex + 1;
            }
            let pieceIndex = pieceIndex + 1;
            let pgRowIndex = pgRowIndex + 1;
        }

        return;
    }

    /*
     * find the top index of playground that has block.
     */
    method int findTopPlaygroundIndex() {
        var Array rowValue,
                  piece;
        var int rowIndex, colIndex,
                pieceCol, pieceRightEdgeCol;

        let piece = tetromino.getCurrentPiece();
        let pieceCol = tetromino.getCol();
        let pieceRightEdgeCol = pieceCol + 4;

        let rowIndex = 0;
        while (rowIndex < MAXROW) {
            let colIndex = pieceCol;
            let rowValue = row[rowIndex];
            while (colIndex < pieceRightEdgeCol) {
                if (rowValue[colIndex] = 1) {
                    return rowIndex;
                }
                let colIndex = colIndex + 1;
            }
            let rowIndex = rowIndex + 1;
        }
        return rowIndex;
    }

    method boolean isGameOver() {
        var int pieceBottomRowIndex, pieceRowPos,
                pieceActualBottomPos,
                playgroundTopIndex;

        let pieceBottomRowIndex = tetromino.getPieceBottomRowIndex();
        let pieceRowPos = tetromino.getRow();
        let playgroundTopIndex = findTopPlaygroundIndex();
        let pieceActualBottomPos = pieceRowPos + pieceBottomRowIndex;
        if (debugFlag = 6) {
            do Graphics.clearDebugScreen();
            do Output.printString("isGameOver");
            do Output.println();
            do Utilities.debugDisplayIntValue("piece bottom", pieceActualBottomPos);
            do Utilities.debugDisplayIntValue("playground top", playgroundTopIndex);
        }
        if ((pieceActualBottomPos > playgroundTopIndex) & (playgroundTopIndex < 2)){
            do Graphics.clearDebugScreen();
            do Output.printString("isGameOver");
            do Output.println();
            do Utilities.debugDisplayIntValue("piece bottom", pieceActualBottomPos);
            do Utilities.debugDisplayIntValue("playground top", playgroundTopIndex);
           return true;
        }
        return false;
    }

    // dRow - delta.
    // e.g. dRow = 1 what if the current tetromino is at row + 1?
    method boolean isHitRevised(int dRow, int dCol) {
        var int currentPieceRowPos,
                currentPieceColPos,
                pieceValue,
                playgroundValue,
                pgRow,
                pgCol,
                i,j,
                leftEdgeIndex,
                colOffset,
                topIndex,
                rowOffset;

        let currentPieceRowPos = tetromino.getRow();
        let currentPieceColPos = tetromino.getCol();
        // from bottom
        let i = tetromino.getPieceBottomRowIndex();
        let leftEdgeIndex = tetromino.getPieceLeftEdgeIndex();
        if (leftEdgeIndex > 0) {
            let colOffset = -1;
        }
        let topIndex = tetromino.getPieceTopRowIndex();
        if (topIndex > 0) {
            let rowOffset = -1;
        }

        //zzzz
        // do Utilities.debugDisplayIntValue("piece row", currentPieceRowPos);
        // do Utilities.debugDisplayIntValue("piece col", currentPieceColPos);
        let pgRow = tetromino.getRow() + dRow + tetromino.getHeight() - 1;
        //
        // go through piece, for i,j that has a block,
        // find the associated row, col on playground,
        // see if it has a block.
        // If it has a block, means collide with piece.
        while (i > -1) {
            let pgCol = tetromino.getCol() + dCol + tetromino.getWidth() - 1;
            // from right edge
            let j = tetromino.getPieceRightEdgeIndex();
            while ((j > 0) | (j = 0)) {
                let pieceValue = tetromino.getPieceValue(i, j);
                if (pieceValue > 0) {
                    // do Utilities.debugDisplayIntValue("i", i);
                    // do Utilities.debugDisplayIntValue("j", j);
                    // do Utilities.debugDisplayIntValue("pRow", tetromino.getRow());
                    // do Utilities.debugDisplayIntValue("pCol", tetromino.getCol());
                    let pgRow = currentPieceRowPos + dRow + i + rowOffset;
                    let pgCol = currentPieceColPos + dCol + j + colOffset;
                    // do Utilities.debugDisplayIntValue("pgRow:", pgRow);
                    // do Utilities.debugDisplayIntValue("pgCol:", pgCol);
                    if ((pgRow = MAXROW) | (pgRow > MAXROW)) {
                        //do Utilities.debugDisplayIntValue("reach max", 1);
                        return true;
                    }
                    if ((pgCol = MAXCOL) | (pgCol > MAXCOL)) {
                        return true;
                    }  
                    let playgroundValue = getValue(pgRow, pgCol);
                    if (playgroundValue > 0) {
                        return true;
                    }
                }
                let pgCol = pgCol - 1;
                let j = j - 1;
            }
            let pgRow = pgRow - 1;            
            let i = i - 1;
        }
        return false;
    }
    
    method boolean isHit(int dRow, int dCol) {
        var Array piece, pieceRowArray;
        var int pieceRowIndex, pieceColIndex,
                pieceTopRowIndex, pieceBottomRowIndex,
                pieceRowPos, pieceColPos,
                pgValue;

        let piece = tetromino.getCurrentPiece();
        // I just tried to save iteration by find the row/col index
        // that has block so it won't go through blank space
        // which may not be necessary.
        let pieceBottomRowIndex = tetromino.getPieceBottomRowIndex();
        let pieceTopRowIndex = tetromino.getPieceTopRowIndex();

        let pieceRowIndex = pieceTopRowIndex;
        while (pieceRowIndex < (pieceBottomRowIndex+1)) {
            let pieceColIndex = 0;
            let pieceRowArray = piece[pieceRowIndex];
            while (pieceColIndex < tetromino.getMaxSize()) {
                // if the piece block is not empty
                if (pieceRowArray[pieceColIndex] > 0) {
                    // get the playground row/col position with respect to
                    // the piece position.
                    let pieceRowPos = tetromino.getRow() + pieceRowIndex + dRow;
                    let pieceColPos = tetromino.getCol() + pieceColIndex + dCol;

                    if ((pieceColPos > (MAXCOL-1) ) | (pieceColPos < 0)) {
                        return true;
                    }

                    let pgValue = getValue(pieceRowPos, pieceColPos);
                    if (pgValue > 0) {
                        return true;
                    }
                }
                let pieceColIndex = pieceColIndex + 1;
            }
            let pieceRowIndex = pieceRowIndex + 1;
        }

        return false;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}