class TetrominoFactory {
    // 0:I-Block
    // 1:O-Block
    // 2:Z-Block

    // pieces: Array[7] holds Array[4][4]
    field Array pieces;
    // iBlock: Array[4][4]
    field Array iBlock;
    field Array oBlock;
    field Array zBlock;
    field Array sBlock;
    field Array pieceCol;

    constructor TetrominoFactory new() {
        var Array pieceCol;
        
        let pieces = Array.new(7);
        let iBlock = Array.new(4);
        let oBlock = Array.new(4);
        let zBlock = Array.new(4);
        let sBlock = Array.new(4);
        
        // I-Block
        let iBlock[0] = define(0, 0, 0, 0);
        let iBlock[1] = define(1, 1, 1, 1);
        let iBlock[2] = define(0, 0, 0, 0);
        let iBlock[3] = define(0, 0, 0, 0);
        // O-Block
        let oBlock[0] = define(0, 0, 0, 0);
        let oBlock[1] = define(0, 1, 1, 0);
        let oBlock[2] = define(0, 1, 1, 0);
        let oBlock[3] = define(0, 0, 0, 0);
        // z-Block
        let zBlock[0] = define(0, 0, 0, 0);
        let zBlock[1] = define(1, 1, 0, 0);
        let zBlock[2] = define(0, 1, 1, 0);
        let zBlock[3] = define(0, 0, 0, 0);
        // s-Block
        let sBlock[0] = define(0, 0, 0, 0);
        let sBlock[1] = define(0, 1, 1, 0);
        let sBlock[2] = define(1, 1, 0, 0);
        let sBlock[3] = define(0, 0, 0, 0);

        // Assign tetromino into pieces array.
        let pieces[0] = iBlock;
        let pieces[1] = oBlock;
        let pieces[2] = zBlock;
        let pieces[3] = sBlock;

        return this;
    }

    // Create and return an Array of 4 integers
    method Array define(int col0, int col1, int col2, int col3) {
        var Array column;
        let column = Array.new(4);
        let column[0] = col0;
        let column[1] = col1;
        let column[2] = col2;
        let column[3] = col3;
        return column;
    }

    method Array getTetromino(int index) {
         //TODO: fix memory leak???
        return (Utilities.copyTwoDimensionArray(pieces[index], 4));
    }

    method void debugDumpPiece(Array piece) {
        var int col, row;
        var Array piece, value;

        while (row < 4) {
                let col = 0;
                let value = piece[row];
                do Output.printString("[");
                while (col < 4) {
                    do Output.printInt(value[col]);
                    if (~(col = 3)) {
                        do Output.printString(" ");
                    }
                    let col = col + 1;
                }
                do Output.printString("]");
                do Output.println();
                let row = row + 1;
                let value = piece[row];
        }
        return;
    }

    method void debugDumpAllPieces() {
        var int index, pos;
        var Array piece;

        let index = 0;
        let pos = 6;
        let piece = pieces[index];
        do Output.moveCursor(pos, 0);
        do Output.printString("Pieces:");
        do Output.println();
        while (index < 3) {
            do debugDumpPiece(piece);
            let pos = pos + 3;
            let index = index + 1;
            let piece = pieces[index];
            do Output.println();
        }
        return;
    }

    method void dispose() {
        //zzzz
        // do Memory.deAlloc(pieces);
        // do Memory.deAlloc(iBlock);
        // do Memory.deAlloc(oBlock);
        // do Memory.deAlloc(zBlock);
        // do Memory.deAlloc(pieceCol);

        do Memory.deAlloc(this);
        return;
    }
}