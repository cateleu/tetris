class TestPlayground {
    field Playground testPlayground;
    field Tetromino tetromino;
    field TetrominoFactory factory;

    constructor TestPlayground new() {
        let factory = TetrominoFactory.new();
        let tetromino = Tetromino.new(factory);
        let testPlayground = Playground.new();
        do tetromino.setPiece(1); // set to use the square block.
        do testPlayground.usePiece(tetromino);
        return this;
    }

    method void clearPlaygroundData() {
        var int i;
        let i = 0;
        while (i < 16) {
            do testPlayground.setRowData(i,
                0,0,0,0,0,0,0,0,0,0);
            let i = i + 1;
        }
        return;
    }

    // fill at rowIndex, col at startCol with fillLength long.
    method void fillPlayground(int rowIndex, int startCol, int fillLength) {
        var int maxFill, i;

        let maxFill = startCol + fillLength;
        let i = startCol;
        while (i < maxFill) {
            do testPlayground.set(rowIndex, i);
            let i = i + 1;
        }
        return;
    }

    method void testDropFastStacking() {
        do testDropFastForOBlock();
        // Test Z block
        do tetromino.setPiece(2);
        do testPlayground.usePiece(tetromino);
        do tetromino.draw(5,0);
        do tetromino.setRow(5);
        do tetromino.setCol(1);
        // in game move left will not have -1

        do testPlayground.dropFastRevised();
        do testPlayground.embedPiece();
        do testPlayground.refresh();
        do testPlayground.dumpPlaygroundData();
        return;
    }

    // tested
    method void testDropFastForZBlock() {
        // setup
        do testPlayground.drawSideEdges();
        // Test Z block
        do tetromino.setPiece(2);
        do testPlayground.usePiece(tetromino);
        do tetromino.draw(5,0);
        do tetromino.setRow(5);
        do tetromino.setCol(0);
        // in game move left will not have -1

        do testPlayground.dropFastRevised();
        do testPlayground.embedPiece();
        do testPlayground.refresh();
        do testPlayground.dumpPlaygroundData();
        
        return;
    }

    method void testDropFastForOBlock() {
       do Output.printString("Hit any key to Continue");
       do Keyboard.readChar();
       do Screen.clearScreen();

       // setup
       do testPlayground.drawSideEdges();
        // Test O block
       do tetromino.setPiece(1);
       do testPlayground.usePiece(tetromino);
       //do tetromino.draw(12,0);
       //do tetromino.setRow(5);
       do tetromino.setRow(0);
       do tetromino.setCol(0);
       // in game move left will not have -1

       do testPlayground.dropFastRevised();
       do testPlayground.embedPiece();
       do testPlayground.refresh();
       do testPlayground.dumpPlaygroundData();
       return;
    }

    // worked
    method void testDropFastForIBlock() {
       do testPlayground.drawSideEdges();
       
       // Test I block
       do tetromino.setPiece(0); // set to use the I block.
       do tetromino.rotateLeft();
       do tetromino.setRow(12);
       do tetromino.setCol(0);
       do testPlayground.usePiece(tetromino);
       do testPlayground.dropFastRevised();
       do testPlayground.embedPiece();

       do testPlayground.dumpPlaygroundData();
       return;
    }

    method void testCollapse() {
        var boolean isEmptyLine;

        do Output.printString("*** testCollapse ***");
        do Output.println();

        // at row 11, start from col 0, fill 9 blocks.
        do fillPlayground(6, 0, 9);
        do fillPlayground(7, 0, 9);
        do fillPlayground(8, 0, 9);
        do fillPlayground(9, 0, 9);
        do fillPlayground(10, 0, 9);
        do fillPlayground(11, 0, 9);
        do fillPlayground(12, 0, 9);
        do fillPlayground(14, 0, 9);
        do fillPlayground(15, 0, 9);
        
        //do testPlayground.dumpPlaygroundData();

        let isEmptyLine = testPlayground.isEmptyLine(13);
        if (isEmptyLine) {
            do Output.printString("Pass: detected empty line at 13");
        } else {
            do Output.printString("Fail: can't detected empty line at 13");
        }
        do Output.println();

        // Test collapse at row 13
        do testPlayground.collapseAt(13);
        return;
    }
    // Bug: when I fast drop, the last row is blank out
    // not being erased!
    method void testStackUp4() {
        do testPlayground.setRowData(9,
            0,0,0,1,0,0,0,0,0,0);
        do testPlayground.setRowData(10,
            0,0,1,1,0,0,0,0,0,0);
        do testPlayground.setRowData(11,
            0,0,1,1,1,1,0,0,0,0);
        do testPlayground.setRowData(12,
            0,1,1,1,1,1,0,0,1,1);
        do testPlayground.setRowData(13,
            0,1,1,1,1,1,1,1,1,1);
        do testPlayground.setRowData(14,
            0,1,1,1,1,1,1,1,1,1);
        do testPlayground.setRowData(15,
            0,1,1,1,1,1,1,0,1,1);

       do testPlayground.drawSideEdges();
       do tetromino.setPiece(0); // set to use the I block.
       do tetromino.rotateLeft();
       
       do tetromino.setRow(8);
       do tetromino.setCol(-1);
       do tetromino.erase(0,0);
       do testPlayground.usePiece(tetromino);
       do tetromino.draw(8, -1);
       // execute test!
       // do testPlayground.embedPiece();
       // do testPlayground.refresh();

       do testPlayground.dropFastRevised();
       do testPlayground.refresh();
       //do testPlayground.dumpPlaygroundData();

       return;
   }

    // Bug:
    // the I block last block is merged with the bottom block.
    // should move up a block up.
    method void testStackUp3() {
         do testPlayground.setRowData(13,
             0,0,0,1,0,0,0,0,0,0);
         do testPlayground.setRowData(14,
             1,1,1,1,0,1,1,0,0,0);
         do testPlayground.setRowData(15,
             1,1,1,1,1,1,1,1,1,0);

        do testPlayground.drawSideEdges();
        do tetromino.setPiece(0); // set to use the I block.
        do tetromino.rotateLeft();
        
        do tetromino.setRow(8);
        do tetromino.setCol(3);
        do tetromino.erase(0,0);
        do testPlayground.usePiece(tetromino);
        //do tetromino.draw(11, 3);
        // execute test!
        // do testPlayground.embedPiece();
        // do testPlayground.refresh();
        do testPlayground.dropFastRevised();
        do testPlayground.refresh();
        do testPlayground.dumpPlaygroundData();

        return;
    }
    method void testStackUp2() {
        do testPlayground.setRowData(12,
            0,0,0,1,1,1,1,1,1,0);
        do testPlayground.setRowData(13,
            0,0,0,1,1,1,1,1,1,0);
        do testPlayground.setRowData(14,
            0,0,1,1,1,1,1,1,1,1);
        do testPlayground.setRowData(15,
            0,0,1,1,1,1,1,1,1,1);

        do testPlayground.drawSideEdges();
        do tetromino.setPiece(1); // set to use the O block.
        // move to bottom left.
        do tetromino.setRow(13);
        do tetromino.setCol(-1);
        // such that the piece won't show inital pos.
        do tetromino.erase(0,0);
        do testPlayground.usePiece(tetromino);
        do tetromino.draw(13, -1);

        // execute test!
        do testPlayground.embedPiece();
        do testPlayground.refresh();
        do testPlayground.dumpPlaygroundData();
        return;
    }
    method void testStackUp() {
        do testPlayground.setRowData(12,
            0,0,1,1,0,0,0,0,0,0);
        do testPlayground.setRowData(13,
            1,1,1,1,0,1,0,0,0,0);
        do testPlayground.setRowData(14,
            1,1,1,1,1,1,0,1,0,1);
        do testPlayground.setRowData(15,
            1,1,1,1,1,1,1,1,0,1);

        //do testPlayground.dumpPlaygroundData();
        do testPlayground.drawSideEdges();
        //do testPlayground.refresh();

        do tetromino.setPiece(2); // set to use the z block.
        do tetromino.rotateLeft();
        do tetromino.setRow(10);
        do tetromino.setCol(3);
        // such that the piece won't show inital pos.
        do tetromino.erase(0,0);
        do testPlayground.usePiece(tetromino);
        do tetromino.draw(10, 3);
        
        // execute test!
        do testPlayground.embedPiece();
        do testPlayground.refresh();
        do testPlayground.dumpPlaygroundData();
        return;
    }

    method void testFillLine() {
        var int rowIndex;
        // insert a tetro at last col

        // for row 11-15, all col filled except last column is empty
        // 9 items.
        do fillPlayground(7, 0, 9);
        do fillPlayground(8, 0, 9);
        do fillPlayground(9, 0, 9);
        do fillPlayground(10, 0, 9);
        do fillPlayground(11, 0, 9);
        do fillPlayground(12, 0, 9);
        do fillPlayground(13, 0, 9);
        do fillPlayground(14, 0, 9);
        do fillPlayground(15, 0, 9);

        // now fill the last col for row 11-15.
        // col 9 = 10th col (last)
        //do testPlayground.set(12, 9);
        //do testPlayground.set(13, 9);
        do testPlayground.set(8, 9);
        do testPlayground.set(9, 9);

        // visual debug.
        do tetromino.setRow(6);
        do tetromino.setCol(9);
        //do testPlayground.dumpPlaygroundData();

        do testPlayground.doFillLineRevised();
        do testPlayground.dumpPlaygroundData();
        //TODO - fix up unit test.
        /*
        do testPlayground.updateLine(13);
        do testPlayground.updateLine(14);
        do testPlayground.updateLine(15);
        */
        do testPlayground.drawSideEdges();
        do testPlayground.refresh();
        /*
        let rowIndex = 15;
        while (rowIndex > 0) {
            do testPlayground.updateLine(rowIndex);
            let rowIndex = rowIndex - 1;
        }
        */
        return;
    }

    // verified
    method void testOBlockMoveRightEdge() {
        do Output.println();
        do Utilities.displayLabel("[testOBlockMoveRightEdge]");
        // tetromino setup.
        do tetromino.setPiece(1); // use O block
        do tetromino.setRow(0);
        do tetromino.setCol(8);
        do testPlayground.usePiece(tetromino);
        if (testPlayground.isHitRevised(0, 1)) {
            do Output.printString("col:8 isHit+1 Expected Hit - Passed!");
        } else {
            do Output.printString("col:8 isHit+1 Expected Hit - Failed");
        }
        do Output.println(); 
        return;
    }

    // verified
    method void testOBlockDropBottom() {
        do Output.println();
        do Utilities.displayLabel("[testOBlockDropBottom]");
        // tetromino setup.
        do tetromino.setPiece(1); // use O block
        do tetromino.setRow(14);
        //do tetromino.setCol(8);
        do tetromino.setCol(0);
        do testPlayground.usePiece(tetromino);
        if (testPlayground.isHitRevised(1, 0)) {
            do Output.printString("row:14 isHit+1 Expected Hit - Passed!");
        } else {
            do Output.printString("col:14 isHit+1 Expected Hit - Failed");
        }
        do Output.println();
        return;
    }

    // verified
    method void testOBlockIsHit() {
        do Output.println();
        do Utilities.displayLabel("[testOBlockIsHit]");

        // tetromino setup.
        do tetromino.setPiece(1); // use O block
        do tetromino.setRow(0);
        do tetromino.setCol(0);
        do testPlayground.usePiece(tetromino);
        if (testPlayground.isHitRevised(15, 0)) {
            do Output.printString("row:0 isHit+15 Expected Hit - Passed!");
        } else {
            do Output.printString("col:0 isHit+15 Expected Hit - Failed");
        }
        do Output.println();
        return;
    }

    // verified
    method void testIBlockMoveRightEdge() {
        do Screen.clearScreen();
        do Output.println();
        do testPlayground.drawSideEdges();
        do Utilities.displayLabel("[testIBlockMoveRightEdge]");
        // tetromino setup.
        do tetromino.setPiece(0); // use I block
        do tetromino.setRow(0);
        do tetromino.setCol(9);
        do testPlayground.usePiece(tetromino);

        // now rotate left 3 times and test
        do tetromino.setRow(0);
        do tetromino.setCol(5);
        do Sys.wait(200);
        do tetromino.rotateLeft();
        do Sys.wait(200);
        do tetromino.rotateLeft();
        do Sys.wait(200);
        do tetromino.rotateLeft();
        do Sys.wait(200);
        do tetromino.moveRight();
        do Sys.wait(200);
        do tetromino.moveRight();
        
        if (testPlayground.isHitRevised(0, 1)) {
            do Output.printString("col:8 isHit+1 Expected No Hit - Failed!");
        } else {
            do Output.printString("col:8 isHit+1 Expected No Hit - Passed");
        }
        do Output.println();
        return;
    }

    method void testIBlockDropBottom() {
        do Output.println();
        do Utilities.displayLabel("[testIBlockDropBottom - horizonal]");
        // tetromino setup.
        do tetromino.setPiece(0); // use I block
        do tetromino.setRow(15);
        do tetromino.setCol(0);
        do testPlayground.usePiece(tetromino);
        if (testPlayground.isHitRevised(1, 0)) {
            do Output.printString("row:15 isHit+1 Expected Hit - Passed!");
        } else {
            do Output.printString("col:15 isHit+1 Expected Hit - Failed");
        }
        do Output.println();
        return;
    }

    // Test bug I block go beyond square.
    // ****
    // 11 
    // 11
    method void testIBlockHitPlayground() {
        // testPlayground setup.
        do testPlayground.setRowData(14,
            1,1,0,0,0,0,0,0,0,0);
        do testPlayground.setRowData(15,
            1,1,0,0,0,0,0,0,0,0);
        // Show the playground graphics first.
        do testPlayground.drawSideEdges();
        do testPlayground.refresh();

        // tetromino setup.
        do tetromino.setPiece(0); // use I block
        do tetromino.setRow(13);
        do tetromino.setCol(0);
        do testPlayground.usePiece(tetromino);
        do tetromino.drawPiece();
        
        // Execute Test
        // can tetromino go down one more row? at row 12.
        // expect Yes!
        // do Output.printString("is hit one step down?");
        // do Output.println();
        if (testPlayground.isHitRevised(1, 0)) {
            do Output.printString("TRUE");
        } else {
            do Output.printString("FALSE");
        }
        // do tetromino.dropTo(12);
        
        // do testPlayground.dropFastRevised();
        // do testPlayground.embedPiece();
        // do testPlayground.refresh();
        // do testPlayground.dumpPlaygroundData();
        
        return;
    }

    // Test bug Z block go beyond square.
    //  **
    // 11** 
    // 11
    method void testZBlockHitPlayground() {
        // testPlayground setup.
        do testPlayground.setRowData(14,
            1,1,0,0,0,0,0,0,0,0);
        do testPlayground.setRowData(15,
            1,1,0,0,0,0,0,0,0,0);
        // Show the playground graphics first.
        do testPlayground.drawSideEdges();
        do testPlayground.refresh();

        // tetromino setup.
        do tetromino.setPiece(2); // use Z block
        do tetromino.setRow(12);
        do tetromino.setCol(1);
        do testPlayground.usePiece(tetromino);
        // Show the tetromino at specific location.
        //do tetromino.draw(10, 1);
        //do tetromino.dropTo(12);
        
        // Execute Test
        // can tetromino go down one more row? at row 12.
        // expect Yes!
        // do Output.printString("is hit one step down?");
        // do Output.println();
        if (testPlayground.isHitRevised(1, 0)) {
            do Utilities.displayLabel("row:12 isHit+1 Expected NOT Hit - Failed!");
        } else {
            do Utilities.displayLabel("row:12 isHit+1 Expected NOT Hit - Passed");
        }

        do Sys.wait(500);
        do Utilities.promptToContinue();
        do Screen.clearScreen();

        do tetromino.setRow(13);
        do tetromino.setCol(1);
        if (testPlayground.isHitRevised(1, 0)) {
            do Utilities.displayLabel("row:13 isHit+1 Expected Hit - Passed!");
        } else {
            do Utilities.displayLabel("row:13 isHit+1 Expected Hit - Failed!");
        }
        //do tetromino.dropTo(13);
        
        // do testPlayground.dropFastRevised();
        // do testPlayground.embedPiece();
        // do testPlayground.refresh();
        // do testPlayground.dumpPlaygroundData();
        do Sys.wait(500);
        do Utilities.promptToContinue();
        do Screen.clearScreen();
        return;
    }

    method void testIsHitRevised() {
        var boolean hit;

        do Screen.clearScreen();
        do Output.println();
        do Output.printString("*** testIsHitRevised ***");
        do Output.println();

        do tetromino.setRow(12);
        do tetromino.setCol(0);
        let hit = testPlayground.isHitRevised(1, 0);
        do Output.printString("*** Row:12 hit next? Result:");
        if (hit) {
            do Output.printString("Pass: hit bottom");
        } else {
            do Output.printString("Fail: hit bottom");
        }

        do Output.println();
        do Output.printString("*** Row:12 hit right on? Result:");
        let hit = testPlayground.isHitRevised(0, 0);
        if (hit) {
            do Output.printString("Fail: not hit bottom");
        } else {
            do Output.printString("Pass: not hit bottom");
        }
        return;
    }

    method void dispose() {
        do testPlayground.dispose();
        do tetromino.dispose();
        do factory.dispose();

        do Memory.deAlloc(this);
        return;
    }
}